{
  "climate": {
    "action": {
      "control": {
        "docs": "This is an [Action](https://esphome.io/automations/actions.html#config-action) for setting parameters for climate devices.\n\n*See also: [`climate.control` Action](https://esphome.io/components/climate/index.html#climate-control-action)*",
        "schema": {
          "extends": [
            "climate.CLIMATE_CONTROL_ACTION_SCHEMA"
          ]
        },
        "type": "schema"
      }
    },
    "components": {
      "anova": {
        "dependencies": [
          "ble_client"
        ],
        "docs": "The `anova` climate platform creates a climate device which can be used to control a BLE Anova sous-vide stick. Whilst not strictly a climate device, the concept of keeping something to a set temperature applies equally here.\n\n*See also: [Anova Cooker](https://esphome.io/components/climate/anova.html#anova-cooker)*"
      },
      "ballu": {},
      "bang_bang": {
        "docs": "The `bang_bang` climate platform allows you to regulate a value with a [bang-bang controller](https://en.wikipedia.org/wiki/Bang%E2%80%93bang_control) (also called hysteresis controller).\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#bang-bang-climate-controller)*"
      },
      "bedjet": {
        "dependencies": [
          "bedjet"
        ],
        "docs": "The `climate` platform exposes the BedJet\u2019s climate-related functionality, including setting the mode and target temperature.\n\n*See also: [bedjet Climate](https://esphome.io/components/climate/bedjet.html#bedjet-climate)*"
      },
      "climate_ir_lg": {},
      "coolix": {},
      "custom": {},
      "daikin": {},
      "daikin_arc": {},
      "daikin_brc": {},
      "delonghi": {},
      "emmeti": {},
      "fujitsu_general": {},
      "gree": {},
      "haier": {
        "dependencies": [
          "climate",
          "uart"
        ],
        "docs": "This is an implementation of the ESPHome component to control HVAC on the base of the SmartAir2 and hOn Haier protocols (AC that is controlled by the hOn or SmartAir2 application).\n\n*See also: [Haier Climate](https://esphome.io/components/climate/haier.html#haier-climate)*"
      },
      "heatpumpir": {},
      "hitachi_ac344": {},
      "hitachi_ac424": {},
      "midea": {
        "dependencies": [
          "climate",
          "uart"
        ],
        "docs": "The `midea` component creates a Midea air conditioner climate device.\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea.html#midea-air-conditioner)*"
      },
      "midea_ac": {},
      "midea_ir": {},
      "mitsubishi": {},
      "noblex": {},
      "pid": {
        "docs": "The `pid` climate platform allows you to regulate a value with a [PID controller](https://en.wikipedia.org/wiki/PID_controller).\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#pid-climate)*"
      },
      "tcl112": {},
      "thermostat": {
        "docs": "The `thermostat` climate platform allows you to control a climate control system in much the same manner as a physical thermostat. Its operation is similar to the [Bang-Bang](https://esphome.io/components/climate/bang_bang.html) controller; a sensor measures a value (the air temperature) and the controller will try to keep this value within a range defined by the set point(s). To do this, the controller can activate devices like a heating unit and/or a cooling unit to change the value observed by the sensor. When configured for both heating and cooling, it is essentially two [Bang-Bang](https://esphome.io/components/climate/bang_bang.html) controllers in one; it differs, however, in that interaction with the thermostat component is nearly identical to that of a real thermostat.\n\n*See also: [Thermostat Climate Controller](https://esphome.io/components/climate/thermostat.html#thermostat-climate-controller)*"
      },
      "toshiba": {},
      "tuya": {
        "dependencies": [
          "tuya"
        ],
        "docs": "The `tuya` climate platform creates a climate device from a tuya component.\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#tuya-climate)*"
      },
      "uponor_smatrix": {
        "dependencies": [
          "uponor_smatrix"
        ]
      },
      "whirlpool": {},
      "whynter": {},
      "yashima": {},
      "zhlt01": {}
    },
    "schemas": {
      "CLIMATE_CONTROL_ACTION_SCHEMA": {
        "schema": {
          "config_vars": {
            "custom_fan_mode": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set one of the supported custom_fan_modes of the climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "string"
            },
            "custom_preset": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set one of the supported custom_presets of the climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "string"
            },
            "fan_mode": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the fan mode of the climate device. One of `ON`, `OFF`, `AUTO`, `LOW`, `MEDIUM`, `HIGH`, `MIDDLE`, `FOCUS`, `DIFFUSE`, `QUIET`.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": {
                "AUTO": null,
                "DIFFUSE": null,
                "FOCUS": null,
                "HIGH": null,
                "LOW": null,
                "MEDIUM": null,
                "MIDDLE": null,
                "OFF": null,
                "ON": null,
                "QUIET": null
              }
            },
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the climate device to control.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Required",
              "type": "use_id",
              "use_id_type": "climate::Climate"
            },
            "mode": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Put the climate device in a specific mode. One of\n  * `OFF` - The device is manually set to off, the device is inactive.\n  \n  * `AUTO` - The device is should adjust the temperature dynamically. For example based on a schedule, or learned behavior.\n  \n  * `HEAT` - The device is set to heat to reach a target temperature.\n  \n  * `COOL` - The device is set to cool to reach a target temperature.\n  \n  * `HEAT_COOL` - The device should heat/cool to maintain a target temperature.\n  \n  * `FAN_ONLY` - The device only has the fan enabled, no heating or cooling is taking place.\n  \n  * `DRY` - The device is set to dry/humidity mode.\n  \n  \n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": {
                "AUTO": {
                  "docs": "The device is should adjust the temperature dynamically. For example based on a schedule, or learned behavior."
                },
                "COOL": {
                  "docs": "The device is set to cool to reach a target temperature."
                },
                "DRY": {
                  "docs": "The device is set to dry/humidity mode."
                },
                "FAN_ONLY": {
                  "docs": "The device only has the fan enabled, no heating or cooling is taking place."
                },
                "HEAT": {
                  "docs": "The device is set to heat to reach a target temperature."
                },
                "HEAT_COOL": {
                  "docs": "The device should heat/cool to maintain a target temperature."
                },
                "OFF": {
                  "docs": "The device is manually set to off, the device is inactive."
                }
              }
            },
            "preset": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the preset of the climate device. One of `ECO`, `AWAY`, `BOOST`, `COMFORT`, `HOME`, `SLEEP`, `ACTIVITY`.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": {
                "ACTIVITY": null,
                "AWAY": null,
                "BOOST": null,
                "COMFORT": null,
                "ECO": null,
                "HOME": null,
                "NONE": null,
                "SLEEP": null
              }
            },
            "swing_mode": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the swing mode of the climate device. One of `OFF`, `BOTH`, `VERTICAL`, `HORIZONTAL`.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": {
                "BOTH": null,
                "HORIZONTAL": null,
                "OFF": null,
                "VERTICAL": null
              }
            },
            "target_humidity": {
              "docs": "**, float, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the target humidity of a climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true
            },
            "target_temperature": {
              "docs": "**, float, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the target temperature of a climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true
            },
            "target_temperature_high": {
              "docs": "**, float, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the higher target temperature of a climate device with a two-point target temperature.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true
            },
            "target_temperature_low": {
              "docs": "**, float, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the lower target temperature of a climate device with a two-point target temperature.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "key": "Optional",
              "templatable": true
            }
          }
        },
        "type": "schema"
      },
      "CLIMATE_SCHEMA": {
        "schema": {
          "config_vars": {
            "action_state_topic": {
              "docs": "**, string**: The topic to publish climate device action changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "away_command_topic": {
              "key": "Optional"
            },
            "away_state_topic": {
              "key": "Optional"
            },
            "current_humidity_state_topic": {
              "docs": "**, string**: The topic to publish current humidity changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "current_temperature_state_topic": {
              "docs": "**, string**: The topic to publish current temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "fan_mode_command_topic": {
              "docs": "**, string**: The topic to receive fan mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "fan_mode_state_topic": {
              "docs": "**, string**: The topic to publish fan mode changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "id": {
              "docs": "**, string**: Manually specify the ID for code generation. At least one of **id** and **name** must be specified.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "id_type": {
                "class": "climate::Climate",
                "parents": [
                  "EntityBase"
                ]
              },
              "key": "GeneratedID"
            },
            "mode_command_topic": {
              "docs": "**, string**: The topic to receive climate device mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "mode_state_topic": {
              "docs": "**, string**: The topic to publish climate device mode changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "mqtt_id": {
              "id_type": {
                "class": "mqtt::MQTTClimateComponent",
                "parents": [
                  "Component",
                  "mqtt::MQTTComponent"
                ]
              },
              "key": "Optional"
            },
            "on_control": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_state": {
              "key": "Optional",
              "type": "trigger"
            },
            "preset_command_topic": {
              "docs": "**, string**: The topic to receive preset commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "preset_state_topic": {
              "docs": "**, string**: The topic to publish preset changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "swing_mode_command_topic": {
              "docs": "**, string**: The topic to receive swing mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "swing_mode_state_topic": {
              "docs": "**, string**: The topic to publish swing mode changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_humidity_command_topic": {
              "docs": "**, string**: The topic to receive target humidity commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_humidity_state_topic": {
              "docs": "**, string**: The topic to publish target humidity changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_temperature_command_topic": {
              "docs": "**, string**: The topic to receive target temperature commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_temperature_high_command_topic": {
              "docs": "**, string**: The topic to receive higher target temperature commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_temperature_high_state_topic": {
              "docs": "**, string**: The topic to publish higher target temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_temperature_low_command_topic": {
              "docs": "**, string**: The topic to receive lower target temperature commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_temperature_low_state_topic": {
              "docs": "**, string**: The topic to publish lower target temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "target_temperature_state_topic": {
              "docs": "**, string**: The topic to publish target temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional"
            },
            "visual": {
              "default": "{}",
              "docs": "Visual settings for the climate device - these do not affect operation and are solely for controlling how the climate device shows up in the frontend.\n  * **min_temperature** (*Optional*, float): The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **max_temperature** (*Optional*, float): The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **temperature_step** (*Optional*, float): The granularity with which the target temperature can be controlled. Can be a single number, or split as below:\n    * **target_temperature** (**Required**, float): The granularity for target temperature\n    \n    * **current_temperature** (**Required**, float): The granularity for current temperature\n    \n    \n  \n  * **min_humidity** (*Optional*, percentage): The minimum humidity the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **max_humidity** (*Optional*, percentage): The maximum humidity the climate device can reach. Used to set the range of the frontend gauge.\n  \n  \n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "max_humidity": {
                    "docs": "**, percentage**: The maximum humidity the climate device can reach. Used to set the range of the frontend gauge.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
                    "key": "Optional"
                  },
                  "max_temperature": {
                    "docs": "**, float**: The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
                    "key": "Optional"
                  },
                  "min_humidity": {
                    "docs": "**, percentage**: The minimum humidity the climate device can reach. Used to set the range of the frontend gauge.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
                    "key": "Optional"
                  },
                  "min_temperature": {
                    "docs": "**, float**: The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
                    "key": "Optional"
                  },
                  "temperature_step": {
                    "docs": "**, float**: The granularity with which the target temperature can be controlled. Can be a single number, or split as below:\n  * **target_temperature** (**Required**, float): The granularity for target temperature\n  \n  * **current_temperature** (**Required**, float): The granularity for current temperature\n  \n  \n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*",
                    "key": "Optional"
                  }
                }
              },
              "type": "schema"
            },
            "web_server": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "sorting_group_id": {
                    "key": "Optional",
                    "type": "use_id",
                    "use_id_type": "int"
                  },
                  "sorting_weight": {
                    "key": "Optional"
                  },
                  "web_server_id": {
                    "key": "Optional",
                    "type": "use_id",
                    "use_id_type": "web_server::WebServer"
                  }
                }
              },
              "type": "schema"
            }
          },
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.MQTT_COMMAND_COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      },
      "VISUAL_TEMPERATURE_STEP_SCHEMA": {
        "schema": {
          "config_vars": {
            "current_temperature": {
              "key": "Required"
            },
            "target_temperature": {
              "key": "Required"
            }
          }
        },
        "type": "schema"
      }
    }
  }
}