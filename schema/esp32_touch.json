{
  "esp32_touch": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "debounce_count": {
              "docs": "**, `int` range 0-7**: Sets the debounce count; if the measured values continue to exceed the threshold for `n + 1` times, the touch sensor state changes.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "integer"
            },
            "denoise_cap_level": {
              "docs": "Select internal reference capacitance of denoise channel. Must be one of `L0`, `L1`, `L2`, `L3`, `L4`, `L5`, `L6` or `L7`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "L0": null,
                "L1": null,
                "L2": null,
                "L3": null,
                "L4": null,
                "L5": null,
                "L6": null,
                "L7": null
              }
            },
            "denoise_grade": {
              "docs": "Sets the denoise range of the denoise channel. Determined by measuring the noise amplitude of the denoise channel. Must be one of `BIT12`, `BIT10`, `BIT8` or `BIT4`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "BIT10": null,
                "BIT12": null,
                "BIT4": null,
                "BIT8": null
              }
            },
            "filter_mode": {
              "docs": "Sets the filter mode. Must be one of `IIR_4`, `IIR_8`, `IIR_16`, `IIR_32`, `IIR_64`, `IIR_128`, `IIR_256` or `JITTER`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "IIR_128": null,
                "IIR_16": null,
                "IIR_256": null,
                "IIR_32": null,
                "IIR_4": null,
                "IIR_64": null,
                "IIR_8": null,
                "JITTER": null
              }
            },
            "high_voltage_reference": {
              "default": "2.7V",
              "docs": "The high voltage reference to use for the charge cycles. One of `2.4V`, `2.5V`, `2.6V`, `2.7V`. Default is `2.7V`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional"
            },
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for code generation.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "id_type": {
                "class": "esp32_touch::ESP32TouchComponent",
                "parents": [
                  "Component"
                ]
              },
              "key": "GeneratedID"
            },
            "iir_filter": {
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: Optionally set up an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter should be applied to all touch pads. This can increase the accuracy of the touch pads a lot, but higher values decrease the response time. A good value to start with is `10ms`. By default, the IIR filter is inactive.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "type": "schema"
            },
            "jitter_step": {
              "docs": "**, `int` range 0-15**: Set jitter filter step size.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "integer"
            },
            "low_voltage_reference": {
              "default": "0.5V",
              "docs": "The low voltage reference to use for the charge cycles. One of `0.5V`, `0.6V`, `0.7V`, `0.8V`. Default is `0.5V`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional"
            },
            "measurement_duration": {
              "default": "8192us",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set the conversion time for all touch pads. A longer conversion time means that more charge/discharge cycles of the touch pad can be performed, therefore increasing accuracy. Default is about 8ms, the maximum amount.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.time_period_dict"
                ]
              },
              "type": "schema"
            },
            "noise_threshold": {
              "docs": "**, `int` range 0-3**: Noise threshold coefficient. Higher = More noise resistance. The actual noise should be less than (noise coefficient * touch threshold). The coefficient is 0: 4/8; 1: 3/8; 2: 2/8; 3: 1.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "integer"
            },
            "setup_mode": {
              "default": "False",
              "docs": "**, boolean**: Whether debug messages with the touch pad value should be displayed in the logs. Useful for finding out suitable thresholds for the binary sensors, but will spam the logs. See [setting up touch pads](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor) for more information. Defaults to `false`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "boolean"
            },
            "sleep_duration": {
              "default": "27306us",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set a time period denoting the amount of time the touch peripheral should sleep between measurements. This can decrease power usage but make the sensor slower. Default is about 27 milliseconds.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.time_period_dict"
                ]
              },
              "type": "schema"
            },
            "smooth_mode": {
              "docs": "Level of filter applied on the original data against large noise interference. Must be one of `OFF`, `IIR_2`, `IIR_4` or `IIR_8`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "IIR_2": null,
                "IIR_4": null,
                "IIR_8": null,
                "OFF": null
              }
            },
            "voltage_attenuation": {
              "default": "0V",
              "docs": "The voltage attenuation to use for the charge cycles. One of `1.5V`, `1V`, `0.5V`, `0V`. Default is `0V`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional"
            },
            "waterproof_guard_ring": {
              "docs": "**, [Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: Sets the touch channel to use for the guard pad. The guard pad is used to detect the large area of water covering the touch panel.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional"
            },
            "waterproof_shield_driver": {
              "docs": "Shield channel drive capability configuration; the larger the parasitic capacitance on the shielding channel, the higher the drive capability needs to be set. Must be one of `L0`, `L1`, `L2`, `L3`, `L4`, `L5`, `L6` or `L7`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "L0": null,
                "L1": null,
                "L2": null,
                "L3": null,
                "L4": null,
                "L5": null,
                "L6": null,
                "L7": null
              }
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  },
  "esp32_touch.binary_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "esp32_touch_id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "esp32_touch::ESP32TouchComponent"
            },
            "id": {
              "id_type": {
                "class": "esp32_touch::ESP32TouchBinarySensor",
                "parents": [
                  "EntityBase",
                  "binary_sensor::BinarySensor"
                ]
              }
            },
            "pin": {
              "docs": "**, [Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to detect touch events on.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*",
              "key": "Required"
            },
            "threshold": {
              "data_type": "uint32_t",
              "docs": "**, `int`**: The threshold to use to detect touch events. See [Finding Thresholds](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-finding-thresholds) below for help determining this value.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*",
              "key": "Required",
              "type": "integer"
            },
            "wakeup_threshold": {
              "data_type": "uint32_t",
              "default": "0",
              "docs": "**, `int`**: The threshold to use to detect touch events to wake-up from deep sleep. See [Finding Thresholds](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-finding-thresholds) below for help determining this value. Touch pad sensors that should trigger a wake-up from deep sleep must specify this value. The [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-component) must also be configured to enable wake-up from a touch event. Note that no filter(s) is/are active during deep sleep.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*",
              "key": "Optional",
              "type": "integer"
            }
          },
          "extends": [
            "binary_sensor.BINARY_SENSOR_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  }
}