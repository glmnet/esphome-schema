{
  "remote_base": {
    "dumper": {
      "abbwelcome": {},
      "aeha": {},
      "beo4": {},
      "byronsx": {},
      "canalsat": {},
      "canalsatld": {},
      "coolix": {},
      "dish": {},
      "dooya": {},
      "drayton": {},
      "gobox": {},
      "haier": {},
      "jvc": {},
      "keeloq": {},
      "lg": {},
      "magiquest": {},
      "midea": {},
      "mirage": {},
      "nec": {},
      "nexa": {},
      "panasonic": {},
      "pioneer": {},
      "pronto": {},
      "raw": {},
      "rc5": {},
      "rc6": {},
      "rc_switch": {},
      "roomba": {},
      "samsung": {},
      "samsung36": {},
      "sony": {},
      "toshiba_ac": {},
      "toto": {}
    },
    "schemas": {
      "BASE_REMOTE_TRANSMITTER_SCHEMA": {
        "schema": {
          "config_vars": {
            "repeat": {
              "docs": "Defines the number of times the code is repeated when transmitted. By default, codes are sent only once.\n  * **times** ([templatable](https://esphome.io/automations/templates.html#config-templatable), int): The number of times to repeat the code.\n  \n  * **wait_time** ([templatable](https://esphome.io/automations/templates.html#config-templatable), [Time](https://esphome.io/guides/configuration-types.html#config-time)): The time to wait between repeats (in \u00b5s as a result of a [lambda](https://esphome.io/automations/templates.html#config-lambda)).\n  \n  \n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*",
              "key": "Optional"
            },
            "transmitter_id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The remote transmitter to send the remote code with. Defaults to the first one defined in the configuration.\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*",
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "remote_base::RemoteTransmitterBase"
            }
          }
        },
        "type": "schema"
      },
      "CANALSAT_SCHEMA": {
        "schema": {
          "config_vars": {
            "address": {
              "data_type": "hex_uint8_t",
              "default": "0",
              "docs": "**, int**: The address (or subdevice) to trigger on, see dumper output for more info. Defaults to `0`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "key": "Optional"
            },
            "command": {
              "data_type": "hex_uint8_t",
              "docs": "**, int**: The command to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "key": "Required"
            },
            "device": {
              "data_type": "hex_uint8_t",
              "docs": "**, int**: The device to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "key": "Required"
            }
          }
        },
        "type": "schema"
      },
      "RC_SWITCH_PROTOCOL_SCHEMA": {
        "schema": {
          "config_vars": {
            "inverted": {
              "default": "False",
              "key": "Optional",
              "type": "boolean"
            },
            "one": {
              "data_type": "RC_SWITCH_TIMING_SCHEMA",
              "default": "[3, 1]",
              "key": "Optional"
            },
            "pulse_length": {
              "data_type": "uint32_t",
              "key": "Required",
              "type": "integer"
            },
            "sync": {
              "data_type": "RC_SWITCH_TIMING_SCHEMA",
              "default": "[1, 31]",
              "key": "Optional"
            },
            "zero": {
              "data_type": "RC_SWITCH_TIMING_SCHEMA",
              "default": "[1, 3]",
              "key": "Optional"
            }
          }
        },
        "type": "schema"
      }
    }
  }
}