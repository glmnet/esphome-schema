{
  "tcs34725.sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "address": {
              "data_type": "hex_uint8_t",
              "default": "41",
              "docs": "**, int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x29`.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional"
            },
            "blue_channel": {
              "docs": "Value of the blue color channel relative to the clear channel, as a percentage. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "tcs34725.sensor.color_channel_schema"
                ]
              },
              "type": "schema"
            },
            "clear_channel": {
              "docs": "Value of the clear (without a color filter) channel, relative to the maximum value for the chosen integration time. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "tcs34725.sensor.color_channel_schema"
                ]
              },
              "type": "schema"
            },
            "color_temperature": {
              "docs": "Get the calculated color temperature of the light in Kelvin.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "icon": {
                    "default": "mdi:thermometer"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "K"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "gain": {
              "default": "1X",
              "docs": "Set the gain for the internal ADCs to work better in certain low-light conditions. Valid values are `1x` (default), `4x`, `16x`, `60x` (highest gain). Will be overwritten if auto integration time is used\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "16X": null,
                "1X": null,
                "4X": null,
                "60X": null
              }
            },
            "glass_attenuation_factor": {
              "default": "1.0",
              "docs": "The attenuation factor of glass if it\u2019s behind some glass facia. Default is `1.0` means `100%` transmissivity. `2` means `50%` transmissivity etc.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional"
            },
            "green_channel": {
              "docs": "Value of the green color channel relative to the clear channel, as a percentage. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "tcs34725.sensor.color_channel_schema"
                ]
              },
              "type": "schema"
            },
            "i2c_id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "i2c::I2CBus"
            },
            "id": {
              "id_type": {
                "class": "tcs34725::TCS34725Component",
                "parents": [
                  "Component",
                  "PollingComponent",
                  "i2c::I2CDevice"
                ]
              },
              "key": "GeneratedID"
            },
            "illuminance": {
              "docs": "Get the total illuminance of the sensor in lx.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "illuminance"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "lx"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "integration_time": {
              "default": "auto",
              "docs": "The amount of time the light sensor is exposed. Valid values are `auto` (default), `2.4ms`, `24ms`, `50ms`, `101ms`, `120ms`, `154ms`, `180ms`, `199ms`, `240ms`, `300ms`, `360ms`, `401ms`, `420ms`, `480ms`, `499ms`, `540ms`, `600ms`, `614ms`.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "type": "enum",
              "values": {
                "101ms": null,
                "120ms": null,
                "154ms": null,
                "180ms": null,
                "199ms": null,
                "2.4ms": null,
                "240ms": null,
                "24ms": null,
                "300ms": null,
                "360ms": null,
                "401ms": null,
                "420ms": null,
                "480ms": null,
                "499ms": null,
                "50ms": null,
                "540ms": null,
                "600ms": null,
                "614ms": null,
                "auto": null
              }
            },
            "red_channel": {
              "docs": "Value of the red color channel relative to the clear channel, as a percentage. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "tcs34725.sensor.color_channel_schema"
                ]
              },
              "type": "schema"
            },
            "update_interval": {
              "default": "60s",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*",
              "key": "Optional"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      },
      "color_channel_schema": {
        "schema": {
          "config_vars": {
            "accuracy_decimals": {
              "default": "1"
            },
            "icon": {
              "default": "mdi:lightbulb"
            },
            "state_class": {
              "default": "measurement"
            },
            "unit_of_measurement": {
              "default": "%"
            }
          },
          "extends": [
            "sensor.SENSOR_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  }
}