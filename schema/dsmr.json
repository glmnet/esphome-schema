{
  "dsmr": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "is_list": true,
        "schema": {
          "config_vars": {
            "crc_check": {
              "default": "True",
              "docs": "**, boolean**: Specifies if the CRC check must be done. This is required to be set to false for older DSMR versions as they do not provide a CRC. Defaults to `true`.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional",
              "type": "boolean"
            },
            "decryption_key": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable), 32 characters, case insensitive**: The key to decrypt the telegrams. Used in Lux only.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional"
            },
            "gas_mbus_id": {
              "default": "1",
              "docs": "**, int**: The id of the gas meter. Defaults to `1`.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional",
              "type": "integer"
            },
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the DSMR if you have multiple components.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "id_type": {
                "class": "esphome::dsmr::Dsmr",
                "parents": [
                  "Component",
                  "uart::UARTDevice"
                ]
              },
              "key": "GeneratedID"
            },
            "max_telegram_length": {
              "default": "1500",
              "docs": "**, integer**: The size of the buffer used for reading DSMR telegrams. Increase if you are reading from a smart meter that sends large telegrams. Defaults to `1500`.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional",
              "type": "integer"
            },
            "receive_timeout": {
              "default": "200ms",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: The timeout on incoming data while reading a telegram. When no new data arrive within the given timeout, the device will consider the current telegram a loss and starts looking for the header of the next telegram. Defaults to `200ms`.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "type": "schema"
            },
            "request_interval": {
              "default": "0ms",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: The minimum time between two telegram readings. Defaults to `0ms`, meaning that the pace at which the smart meter sends its data determines the update frequency. This works best in combination with a `request_pin`, but this option will work without one too.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "type": "schema"
            },
            "request_pin": {
              "docs": "**, [Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin that can be used for controlling the P1 port\u2019s Data Request pin. Defaults to not using a Data Request pin. See [Using the P1 Data Request pin](https://esphome.io/components/sensor/dsmr.html#sensor-dsmr-request-pin).\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "Optional",
              "modes": [
                "output"
              ],
              "schema": true,
              "type": "pin"
            },
            "uart_id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*",
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "uart::UARTComponent"
            },
            "water_mbus_id": {
              "default": "2",
              "key": "Optional",
              "type": "integer"
            }
          }
        },
        "type": "schema"
      }
    }
  },
  "dsmr.sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "active_energy_import_current_average_demand": {
              "docs": "Current Average Quarterly Demand for Peak Tarrif Belgium.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "active_energy_import_maximum_demand_last_13_months": {
              "docs": "13 Month Maximum Quarterly Demand for Peak Tarrif Belgium.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "active_energy_import_maximum_demand_running_month": {
              "docs": "Current Month\u2019s Maximum Quarterly Demand for Peak Tarrif Belgium.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "current_l1": {
              "docs": "Current Phase 1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "current"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "A"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "current_l2": {
              "docs": "Current Phase 2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "current"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "A"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "current_l3": {
              "docs": "Current Phase 3.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "current"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "A"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "dsmr_id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "esphome::dsmr::Dsmr"
            },
            "electricity_failures": {
              "docs": "Electricity Failures.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_long_failures": {
              "docs": "Long Electricity Failures.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_sags_l1": {
              "docs": "Number of voltage sags in phase L1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_sags_l2": {
              "docs": "Number of voltage sags in phase L2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_sags_l3": {
              "docs": "Number of voltage sags in phase L3.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_swells_l1": {
              "docs": "Number of voltage swells in phase L1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_swells_l2": {
              "docs": "Number of voltage swells in phase L2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_swells_l3": {
              "docs": "Number of voltage swells in phase L3.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_switch_position": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_threshold": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "energy_delivered_lux": {
              "docs": "Energy Consumed Luxembourg\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "energy"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "kWh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "energy_delivered_tariff1": {
              "docs": "Energy Consumed Tariff 1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "energy"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "kWh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "energy_delivered_tariff2": {
              "docs": "Energy Consumed Tariff 2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "energy"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "kWh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "energy_returned_lux": {
              "docs": "Energy Produced Luxembourg\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "energy"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "kWh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "energy_returned_tariff1": {
              "docs": "Energy Produced Tariff 1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "energy"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "kWh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "energy_returned_tariff2": {
              "docs": "Energy Produced Tariff 2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "energy"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "kWh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "gas_delivered": {
              "docs": "Gas Consumed.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "gas"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "m\u00b3"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "gas_delivered_be": {
              "docs": "Gas Consumed Belgium.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "gas"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "m\u00b3"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_delivered": {
              "docs": "Power Consumed.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_delivered_l1": {
              "docs": "Power Consumed Phase 1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_delivered_l2": {
              "docs": "Power Consumed Phase 2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_delivered_l3": {
              "docs": "Power Consumed Phase 3.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_returned": {
              "docs": "Power Produced.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_returned_l1": {
              "docs": "Power Produced Phase 1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_returned_l2": {
              "docs": "Power Produced Phase 2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "power_returned_l3": {
              "docs": "Power Produced Phase 3.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "power"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kW"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_delivered": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_delivered_l1": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_delivered_l2": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_delivered_l3": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_returned": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_returned_l1": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_returned_l2": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "reactive_power_returned_l3": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "kVAR"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "total_exported_energy": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "unit_of_measurement": {
                    "default": "kVARh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "total_imported_energy": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "unit_of_measurement": {
                    "default": "kVARh"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "voltage_l1": {
              "docs": "Voltage Phase 1.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "voltage"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "V"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "voltage_l2": {
              "docs": "Voltage Phase 2.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "voltage"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "V"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "voltage_l3": {
              "docs": "Voltage Phase 3.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "voltage"
                  },
                  "state_class": {
                    "default": "measurement"
                  },
                  "unit_of_measurement": {
                    "default": "V"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "water_delivered": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "3"
                  },
                  "device_class": {
                    "default": "water"
                  },
                  "state_class": {
                    "default": "total_increasing"
                  },
                  "unit_of_measurement": {
                    "default": "m\u00b3"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  },
  "dsmr.text_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "dsmr_id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "esphome::dsmr::Dsmr"
            },
            "electricity_failure_log": {
              "docs": "Electricity Failure Log\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "electricity_tariff": {
              "docs": "The current tariff. According to the specs value \u20180001\u2019 means \u2018normal tariff\u2019 and value \u20180002\u2019 means \u2018low tariff\u2019. Your meter may report differently.\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "gas_delivered_text": {
              "docs": "A text sensor which unformatted gas data. You need to apply a custom parsing of this value depending on your meter format.\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "gas_equipment_id": {
              "docs": "Gas Equipment ID.\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "identification": {
              "docs": "DSMR Identification\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "message_long": {
              "docs": "Message Long\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "message_short": {
              "docs": "Message Short\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "p1_version": {
              "docs": "DSMR Version\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "p1_version_be": {
              "docs": "DSMR Version Belgium\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "sub_equipment_id": {
              "docs": "Sub Equipment ID\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "telegram": {
              "docs": "The (decrypted) unparsed telegram, marked as internal sensor. Can also be used to trigger an action based on the last values.\n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "internal": {
                    "default": "True"
                  }
                },
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "thermal_equipment_id": {
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "timestamp": {
              "docs": "Timestamp\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "water_equipment_id": {
              "docs": "Water Equipment ID\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "text_sensor.TEXT_SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  }
}