{
  "lock": {
    "action": {
      "lock": {
        "docs": "This action locks a lock with the given ID on when executed.\n\n*See also: [`lock.lock` Action](https://esphome.io/components/lock/index.html#lock-lock-action)*",
        "schema": {
          "extends": [
            "lock.LOCK_ACTION_SCHEMA"
          ]
        },
        "type": "schema"
      },
      "open": {
        "docs": "This action opens (e.g. unlatch) a lock with the given ID off when executed.\n\n*See also: [`lock.open` Action](https://esphome.io/components/lock/index.html#lock-open-action)*",
        "schema": {
          "extends": [
            "lock.LOCK_ACTION_SCHEMA"
          ]
        },
        "type": "schema"
      },
      "unlock": {
        "docs": "This action unlocks a lock with the given ID off when executed.\n\n*See also: [`lock.unlock` Action](https://esphome.io/components/lock/index.html#lock-unlock-action)*",
        "schema": {
          "extends": [
            "lock.LOCK_ACTION_SCHEMA"
          ]
        },
        "type": "schema"
      }
    },
    "components": {
      "copy": {},
      "output": {
        "docs": "The `output` lock platform allows you to use any output component as a lock.\n\n*See also: [Generic Output Lock](https://esphome.io/components/lock/output.html#generic-output-lock)*"
      },
      "template": {
        "docs": "The `template` lock platform allows you to create simple locks out of just actions and an optional value lambda. Once defined, it will automatically appear in Home Assistant as a lock and can be controlled through the frontend.\n\n*See also: [Template Lock](https://esphome.io/components/lock/template.html#template-lock)*"
      }
    },
    "condition": {
      "is_locked": {
        "schema": {
          "extends": [
            "lock.LOCK_ACTION_SCHEMA"
          ]
        },
        "type": "schema"
      },
      "is_unlocked": {
        "schema": {
          "extends": [
            "lock.LOCK_ACTION_SCHEMA"
          ]
        },
        "type": "schema"
      }
    },
    "schemas": {
      "LOCK_ACTION_SCHEMA": {
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "type": "use_id",
              "use_id_type": "lock::Lock"
            }
          }
        },
        "type": "schema"
      },
      "LOCK_SCHEMA": {
        "schema": {
          "config_vars": {
            "id": {
              "docs": "**, string**: Manually specify the ID for code generation. At least one of **id** and **name** must be specified.\n\n*See also: [Lock Component](https://esphome.io/components/lock/index.html#base-lock-configuration)*"
            },
            "mqtt_id": {
              "id_type": {
                "class": "mqtt::MQTTLockComponent",
                "parents": [
                  "Component",
                  "mqtt::MQTTComponent"
                ]
              },
              "key": "Optional"
            },
            "on_lock": {
              "docs": "**, [Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the lock is locked. See [lock.on_lock / lock.on_unlock Trigger](https://esphome.io/components/lock/index.html#lock-on-lock-unlock-trigger).\n\n*See also: [Lock Component](https://esphome.io/components/lock/index.html#base-lock-configuration)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_unlock": {
              "docs": "**, [Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the lock is unlocked. See [lock.on_lock / lock.on_unlock Trigger](https://esphome.io/components/lock/index.html#lock-on-lock-unlock-trigger)..\n\n*See also: [Lock Component](https://esphome.io/components/lock/index.html#base-lock-configuration)*",
              "key": "Optional",
              "type": "trigger"
            },
            "web_server": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "sorting_group_id": {
                    "key": "Optional",
                    "type": "use_id",
                    "use_id_type": "int"
                  },
                  "sorting_weight": {
                    "key": "Optional"
                  },
                  "web_server_id": {
                    "key": "Optional",
                    "type": "use_id",
                    "use_id_type": "web_server::WebServer"
                  }
                }
              },
              "type": "schema"
            }
          },
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.MQTT_COMMAND_COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  }
}