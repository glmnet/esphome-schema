{
  "remote_receiver": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "is_list": true,
        "schema": {
          "config_vars": {
            "buffer_size": {
              "default": "1000b",
              "docs": "**, int**: The size of the internal buffer for storing the remote codes. Defaults to `10kB` on the ESP32 and `1kB` on the ESP8266.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "key": "Optional"
            },
            "clock_divider": {
              "key": "Optional",
              "type": "integer"
            },
            "clock_resolution": {
              "key": "Optional"
            },
            "dump": {
              "default": "[]",
              "docs": "**, list**: Decode and dump these remote codes in the logs (at log.level=DEBUG). Set to `all` to dump all available codecs:\n  * **abbwelcome**: Decode and dump ABB-Welcome codes. Messages are sent via copper wires. See [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-abbwelcome) for more details.\n  \n  * **aeha**: Decode and dump AEHA infrared codes.\n  \n  * **byronsx**: Decode and dump Byron SX doorbell RF codes.\n  \n  * **canalsat**: Decode and dump CanalSat infrared codes.\n  \n  * **canalsatld**: Decode and dump CanalSatLD infrared codes.\n  \n  * **coolix**: Decode and dump Coolix infrared codes.\n  \n  * **dish**: Decode and dump Dish infrared codes.\n  \n  * **dooya**: Decode and dump Dooya RF codes.\n  \n  * **drayton**: Decode and dump Drayton Digistat RF codes.\n  \n  * **jvc**: Decode and dump JVC infrared codes.\n  \n  * **keeloq**: Decode and dump KeeLoq RF codes.\n  \n  * **haier**: Decode and dump Haier infrared codes.\n  \n  * **lg**: Decode and dump LG infrared codes.\n  \n  * **magiquest**: Decode and dump MagiQuest wand infrared codes.\n  \n  * **midea**: Decode and dump Midea infrared codes.\n  \n  * **nec**: Decode and dump NEC infrared codes.\n  \n  * **nexa**: Decode and dump Nexa (RF) codes.\n  \n  * **panasonic**: Decode and dump Panasonic infrared codes.\n  \n  * **pioneer**: Decode and dump Pioneer infrared codes.\n  \n  * **pronto**: Print remote code in Pronto form. Useful for using arbitrary protocols.\n  \n  * **raw**: Print all remote codes in their raw form. Also useful for using arbitrary protocols.\n  \n  * **rc5**: Decode and dump RC5 IR codes.\n  \n  * **rc6**: Decode and dump RC6 IR codes.\n  \n  * **rc_switch**: Decode and dump RCSwitch RF codes.\n  \n  * **roomba**: Decode and dump Roomba infrared codes.\n  \n  * **samsung**: Decode and dump Samsung infrared codes.\n  \n  * **samsung36**: Decode and dump Samsung36 infrared codes.\n  \n  * **sony**: Decode and dump Sony infrared codes.\n  \n  * **toshiba_ac**: Decode and dump Toshiba AC infrared codes.\n  \n  * **mirage**: Decode and dump Mirage infrared codes.\n  \n  * **toto**: Decode and dump Toto infrared codes.\n  \n  \n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "key": "Optional"
            },
            "filter": {
              "default": "50us",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: Filter any pulses that are shorter than this. Useful for removing glitches from noisy signals. Allowed values are in range `0` to `4294967295us`. Defaults to `50us`.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.positive_time_period_microseconds"
                ]
              },
              "type": "schema"
            },
            "filter_symbols": {
              "key": "Optional",
              "type": "integer"
            },
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation. Useful when multiple receivers are configured on a single device.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "id_type": {
                "class": "remote_receiver::RemoteReceiverComponent",
                "parents": [
                  "Component",
                  "remote_base::RemoteReceiverBase"
                ]
              },
              "key": "GeneratedID"
            },
            "idle": {
              "default": "10ms",
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time that a signal should remain stable/unchanged for it to be considered complete. Allowed values are in range `0` to `4294967295us`. Defaults to `10ms`.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.positive_time_period_microseconds"
                ]
              },
              "type": "schema"
            },
            "memory_blocks": {
              "key": "Optional",
              "type": "integer"
            },
            "on_abbwelcome": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_aeha": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_beo4": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_byronsx": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_canalsat": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_canalsatld": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_coolix": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_dish": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_dooya": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_drayton": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_gobox": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_haier": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_jvc": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_keeloq": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_lg": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_magiquest": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_midea": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_mirage": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_nec": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_nexa": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_panasonic": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_pioneer": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_pronto": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_raw": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_rc5": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_rc6": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_rc_switch": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_roomba": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_samsung": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_samsung36": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_sony": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_toshiba_ac": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_toto": {
              "key": "Optional",
              "type": "trigger"
            },
            "pin": {
              "docs": "**, [Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to receive the remote signal on.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "internal": true,
              "key": "Required",
              "modes": [
                "input"
              ],
              "schema": true,
              "type": "pin"
            },
            "receive_symbols": {
              "key": "Optional",
              "type": "integer"
            },
            "rmt_channel": {
              "key": "Optional"
            },
            "rmt_symbols": {
              "key": "Optional",
              "type": "integer"
            },
            "tolerance": {
              "default": "25%",
              "docs": "**, int, [Time](https://esphome.io/guides/configuration-types.html#config-time) or mapping**: The percentage or time that the remote signal lengths can deviate in the decoding process.  Defaults to `25%`.\n  * **type** (**Required**, enum): Set the type of the tolerance. Can be `percentage` or `time`.\n  \n  * **value** (**Required**, int or [Time](https://esphome.io/guides/configuration-types.html#config-time)): The percentage or time value. Allowed values are in range `0` to `100%` or `0` to `4294967295us`.\n  \n  \n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*",
              "key": "Optional"
            },
            "use_dma": {
              "key": "Optional",
              "type": "boolean"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  },
  "remote_receiver.binary_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "abbwelcome": {
              "docs": "Trigger on a decoded ABB-Welcome code with the given data, see the [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-abbwelcome) for more info.\n  * **source_address** (**Required**, int): The source address to trigger on.\n  \n  * **destination_address** (**Required**, int): The destination address to trigger on.\n  \n  * **three_byte_address** (*Optional*, boolean): The length of the source and destination address. `false` means two bytes and `true` means three bytes. Defaults to `false`.\n  \n  * **retransmission** (*Optional*, boolean): `true` if the message was re-transmitted. Defaults to `false`.\n  \n  * **message_type** (**Required**, int): The message type to trigger on.\n  \n  * **message_id** (*Optional*, int): The random message ID to trigger on, see dumper output for more info. Defaults to any ID.\n  \n  * **data** (*Optional*, 0-7 bytes list): The code to listen for. Usually you only need to copy this directly from the dumper output. Defaults to `[]`\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "docs": "**, 0-7 bytes list**: The code to listen for. Usually you only need to copy this directly from the dumper output. Defaults to `[]`\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  },
                  "destination_address": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The destination address to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "message_id": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The random message ID to trigger on, see dumper output for more info. Defaults to any ID.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  },
                  "message_type": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The message type to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "retransmission": {
                    "default": "False",
                    "docs": "**, boolean**: `true` if the message was re-transmitted. Defaults to `false`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "boolean"
                  },
                  "source_address": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The source address to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "three_byte_address": {
                    "default": "False",
                    "docs": "**, boolean**: The length of the source and destination address. `false` means two bytes and `true` means three bytes. Defaults to `false`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "boolean"
                  }
                }
              },
              "type": "schema"
            },
            "aeha": {
              "docs": "Trigger on a decoded AEHA remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **data** (**Required**, 3-35 bytes list): The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-aeha) for more info. Usually you only need to copy this directly from the dumper output.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "data_type": "hex_uint16_t",
                    "docs": "**, int**: The address to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "data": {
                    "docs": "**, 3-35 bytes list**: The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-aeha) for more info. Usually you only need to copy this directly from the dumper output.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "beo4": {
              "schema": {
                "config_vars": {
                  "command": {
                    "data_type": "hex_uint8_t",
                    "key": "Required"
                  },
                  "command_repeats": {
                    "data_type": "uint8_t",
                    "default": "1",
                    "key": "Optional",
                    "type": "integer"
                  },
                  "source": {
                    "data_type": "hex_uint8_t",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "byronsx": {
              "docs": "Trigger on a decoded Byron SX Doorbell RF remote code with the given data.\n  * **address** (**Required**, int): The 8-bit ID code to trigger on, see dumper output for more info.\n  \n  * **command** (*Optional*, int): The 4-bit command to listen for. If omitted, will match on any command.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "docs": "**, int**: The 8-bit ID code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "default": "16",
                    "docs": "**, int**: The 4-bit command to listen for. If omitted, will match on any command.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "enum",
                    "values": {
                      "1": null,
                      "13": null,
                      "14": null,
                      "16": null,
                      "2": null,
                      "3": null,
                      "5": null,
                      "6": null,
                      "9": null
                    }
                  }
                }
              },
              "type": "schema"
            },
            "canalsat": {
              "docs": "Trigger on a decoded CanalSat remote code with the given data.\n  * **device** (**Required**, int): The device to trigger on, see dumper output for more info.\n  \n  * **address** (*Optional*, int): The address (or subdevice) to trigger on, see dumper output for more info. Defaults to `0`.\n  \n  * **command** (**Required**, int): The command to listen for.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "extends": [
                  "remote_base.CANALSAT_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "canalsatld": {
              "docs": "Trigger on a decoded CanalSatLD remote code with the given data.\n  * **device** (**Required**, int): The device to trigger on, see dumper output for more info.\n  \n  * **address** (*Optional*, int): The address (or subdevice) to trigger on, see dumper output for more info. Defaults to `0`.\n  \n  * **command** (**Required**, int): The command to listen for.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "extends": [
                  "remote_base.CANALSAT_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "coolix": {
              "docs": "Trigger on a decoded Coolix remote code with the given data. It is possible to directly specify a 24-bit code, it will be checked for a match to at least one of the two received packets. The main configuration scheme is below.\n  * **first** (**Required**, uint32_t): The first 24-bit Coolix code to trigger on, see dumper output for more info.\n  \n  * **second** (*Optional*, uint32_t): The second 24-bit Coolix code to trigger on, see dumper output for more info. If not set, trigger on on only single non-strict packet, specified by the `first` parameter.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "first": {
                    "docs": "**, uint32_t**: The first 24-bit Coolix code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "second": {
                    "default": "0",
                    "docs": "**, uint32_t**: The second 24-bit Coolix code to trigger on, see dumper output for more info. If not set, trigger on on only single non-strict packet, specified by the `first` parameter.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  }
                }
              },
              "type": "schema"
            },
            "dish": {
              "docs": "Trigger on a decoded Dish Network remote code with the given data. Beware that Dish remotes use a different carrier frequency (57.6kHz) that many receiver hardware don\u2019t decode.\n  * **address** (*Optional*, int): The number of the receiver to target, between 1 and 16 inclusive. Defaults to `1`.\n  \n  * **command** (**Required**, int): The Dish command to listen for, between 0 and 63 inclusive.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "default": "1",
                    "docs": "**, int**: The number of the receiver to target, between 1 and 16 inclusive. Defaults to `1`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "integer"
                  },
                  "command": {
                    "docs": "**, int**: The Dish command to listen for, between 0 and 63 inclusive.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "integer"
                  }
                }
              },
              "type": "schema"
            },
            "dooya": {
              "docs": "Trigger on a decoded Dooya RF remote code with the given data.\n  * **id** (**Required**, int): The 24-bit ID code to trigger on.\n  \n  * **channel** (**Required**, int): The 8-bit channel to listen for.\n  \n  * **button** (**Required**, int): The 4-bit button to listen for.\n  \n  * **check** (**Required**, int): The 4-bit check to listen for. Includes an indication that a button is being held down.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "button": {
                    "docs": "**, int**: The 4-bit button to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "channel": {
                    "docs": "**, int**: The 8-bit channel to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "check": {
                    "docs": "**, int**: The 4-bit check to listen for. Includes an indication that a button is being held down.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "id": {
                    "docs": "**, int**: The 24-bit ID code to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "drayton": {
              "docs": "Trigger on a decoded Drayton Digistat RF remote code with the given data.\n  * **address** (**Required**, int): The 16-bit ID code to trigger on, see dumper output for more info.\n  \n  * **channel** (**Required**, int): The 7-bit switch/channel to listen for.\n  \n  * **command** (**Required**, int): The 5-bit command to listen for.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "docs": "**, int**: The 16-bit ID code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "channel": {
                    "docs": "**, int**: The 7-bit switch/channel to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "docs": "**, int**: The 5-bit command to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "gobox": {
              "schema": {
                "config_vars": {
                  "code": {
                    "key": "Required",
                    "type": "integer"
                  }
                }
              },
              "type": "schema"
            },
            "haier": {
              "docs": "Trigger on a Haier remote code with the given code.\n  * **code** (**Required**, 13-bytes list): The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-haier) for more info. Usually you only need to copy this directly from the dumper output.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "code": {
                    "docs": "**, 13-bytes list**: The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-haier) for more info. Usually you only need to copy this directly from the dumper output.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "jvc": {
              "docs": "Trigger on a decoded JVC remote code with the given data.\n  * **data** (**Required**, int): The JVC code to trigger on, see dumper output for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The JVC code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "keeloq": {
              "docs": "Trigger on a decoded KeeLoq RF remote code with the given data.\n  * **address** (**Required**, int): The 32-bit ID code to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The 8-bit switch/command to listen for. If omitted, will match on any command/button.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "docs": "**, int**: The 32-bit ID code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "code": {
                    "key": "Required"
                  },
                  "command": {
                    "default": "16",
                    "docs": "**, int**: The 8-bit switch/command to listen for. If omitted, will match on any command/button.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  },
                  "level": {
                    "default": "False",
                    "key": "Optional",
                    "type": "boolean"
                  }
                }
              },
              "type": "schema"
            },
            "lg": {
              "docs": "Trigger on a decoded LG remote code with the given data.\n  * **data** (**Required**, int): The LG code to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `28`.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The LG code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "nbits": {
                    "default": "28",
                    "docs": "**, int**: The number of bits of the remote code. Defaults to `28`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "enum",
                    "values": {
                      "28": null,
                      "32": null
                    }
                  }
                }
              },
              "type": "schema"
            },
            "magiquest": {
              "docs": "Trigger on a decoded MagiQuest wand remote code with the given wand ID.\n  * **wand_id** (**Required**, int): The MagiQuest wand ID to trigger on, see dumper output for more info.\n  \n  * **magnitude** (*Optional*, int): The magnitude of swishes and swirls of the wand.  If omitted, will match on any activation of the wand.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "magnitude": {
                    "data_type": "hex_uint16_t",
                    "default": "65535",
                    "docs": "**, int**: The magnitude of swishes and swirls of the wand.  If omitted, will match on any activation of the wand.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  },
                  "wand_id": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The MagiQuest wand ID to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "midea": {
              "docs": "Trigger on a Midea remote code with the given code.\n  * **code** (**Required**, 5-bytes list): The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-midea) for more info. Usually you only need to copy first 5 bytes directly from the dumper output.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "code": {
                    "docs": "**, 5-bytes list**: The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-midea) for more info. Usually you only need to copy first 5 bytes directly from the dumper output.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "mirage": {
              "docs": "Trigger on a Mirage remote code with the given code.\n  * **code** (**Required**, 14-bytes list): The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-mirage) for more info. Usually you only need to copy this directly from the dumper output.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "code": {
                    "docs": "**, 14-bytes list**: The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-mirage) for more info. Usually you only need to copy this directly from the dumper output.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "nec": {
              "docs": "Trigger on a decoded NEC remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The NEC command to listen for.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "data_type": "hex_uint16_t",
                    "docs": "**, int**: The address to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "data_type": "hex_uint16_t",
                    "docs": "**, int**: The NEC command to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command_repeats": {
                    "data_type": "uint16_t",
                    "default": "1",
                    "key": "Optional",
                    "type": "integer"
                  }
                }
              },
              "type": "schema"
            },
            "nexa": {
              "docs": "Trigger on a decoded Nexa RF code with the given data.\n  * **device** (**Required**, int): The Nexa device code to trigger on, see dumper output for more info.\n  \n  * **group** (**Required**, int): The Nexa group code to trigger on, see dumper output for more info.\n  \n  * **state** (**Required**, int): The Nexa state code to trigger on, see dumper output for more info.\n  \n  * **channel** (**Required**, int): The Nexa channel code to trigger on, see dumper output for more info.\n  \n  * **level** (**Required**, int): The Nexa level code to trigger on, see dumper output for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "channel": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The Nexa channel code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "device": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The Nexa device code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "group": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The Nexa group code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "level": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The Nexa level code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "state": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The Nexa state code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "panasonic": {
              "docs": "Trigger on a decoded Panasonic remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The command.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "data_type": "hex_uint16_t",
                    "docs": "**, int**: The address to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The command.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "pioneer": {
              "docs": "Trigger on a decoded Pioneer remote code with the given data.\n  * **rc_code_1** (**Required**, int): The remote control code to trigger on, see dumper output for more details.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "rc_code_1": {
                    "data_type": "hex_uint16_t",
                    "docs": "**, int**: The remote control code to trigger on, see dumper output for more details.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "rc_code_2": {
                    "data_type": "hex_uint16_t",
                    "default": "0",
                    "key": "Optional"
                  }
                }
              },
              "type": "schema"
            },
            "pronto": {
              "docs": "Trigger on a Pronto remote code with the given code.\n  * **data** (**Required**, string): The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output.\n  \n  * **delta** (*Optional*, integer): This parameter allows you to manually specify the allowed difference between what Pronto code is specified, and what IR signal has been sent by the remote control.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "docs": "**, string**: The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "string"
                  },
                  "delta": {
                    "default": "-1",
                    "docs": "**, integer**: This parameter allows you to manually specify the allowed difference between what Pronto code is specified, and what IR signal has been sent by the remote control.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "integer"
                  }
                }
              },
              "type": "schema"
            },
            "raw": {
              "docs": "Trigger on a raw remote code with the given code.\n  * **code** (**Required**, list): The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "code": {
                    "docs": "**, list**: The code to listen for, see [transmitter description](https://esphome.io/components/remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "code_storage_id": {
                    "id_type": {
                      "class": "int32_t",
                      "parents": null
                    },
                    "key": "GeneratedID"
                  }
                }
              },
              "type": "schema"
            },
            "rc5": {
              "docs": "Trigger on a decoded RC5 remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The RC5 command to listen for.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "docs": "**, int**: The address to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "docs": "**, int**: The RC5 command to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "rc6": {
              "docs": "Trigger on a decoded RC6 remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The RC6 command to listen for.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The address to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The RC6 command to listen for.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "rc_switch_raw": {
              "docs": "Trigger on a decoded RC Switch raw remote code with the given data.\n  * **code** (**Required**, string): The remote code to listen for, copy this from the dumper output. To ignore a bit in the received data, use `x` at that place in the **code**.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "code": {
                    "docs": "**, string**: The remote code to listen for, copy this from the dumper output. To ignore a bit in the received data, use `x` at that place in the **code**.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "protocol": {
                    "default": "1",
                    "docs": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "schema": {
                      "extends": [
                        "remote_base.RC_SWITCH_PROTOCOL_SCHEMA"
                      ]
                    },
                    "type": "schema"
                  }
                }
              },
              "type": "schema"
            },
            "rc_switch_type_a": {
              "docs": "Trigger on a decoded RC Switch Type A remote code with the given data.\n  * **group** (**Required**, string): The group, binary string.\n  \n  * **device** (**Required**, string): The device in the group, binary string.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "device": {
                    "docs": "**, string**: The device in the group, binary string.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "group": {
                    "docs": "**, string**: The group, binary string.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "protocol": {
                    "default": "1",
                    "docs": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "schema": {
                      "extends": [
                        "remote_base.RC_SWITCH_PROTOCOL_SCHEMA"
                      ]
                    },
                    "type": "schema"
                  },
                  "state": {
                    "docs": "**, boolean**: The on/off state to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "boolean"
                  }
                }
              },
              "type": "schema"
            },
            "rc_switch_type_b": {
              "docs": "Trigger on a decoded RC Switch Type B remote code with the given data.\n  * **address** (**Required**, int): The address, int from 1 to 4.\n  \n  * **channel** (**Required**, int): The channel, int from 1 to 4.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "docs": "**, int**: The address, int from 1 to 4.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "integer"
                  },
                  "channel": {
                    "docs": "**, int**: The channel, int from 1 to 4.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "integer"
                  },
                  "protocol": {
                    "default": "1",
                    "docs": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "schema": {
                      "extends": [
                        "remote_base.RC_SWITCH_PROTOCOL_SCHEMA"
                      ]
                    },
                    "type": "schema"
                  },
                  "state": {
                    "docs": "**, boolean**: The on/off state to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "boolean"
                  }
                }
              },
              "type": "schema"
            },
            "rc_switch_type_c": {
              "docs": "Trigger on a decoded RC Switch Type C remote code with the given data.\n  * **family** (**Required**, string): The family. Range is `a` to `p`.\n  \n  * **group** (**Required**, int): The group. Range is 1 to 4.\n  \n  * **device** (**Required**, int): The device. Range is 1 to 4.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "device": {
                    "docs": "**, int**: The device. Range is 1 to 4.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "integer"
                  },
                  "family": {
                    "docs": "**, string**: The family. Range is `a` to `p`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "enum",
                    "values": {
                      "a": null,
                      "b": null,
                      "c": null,
                      "d": null,
                      "e": null,
                      "f": null,
                      "g": null,
                      "h": null,
                      "i": null,
                      "j": null,
                      "k": null,
                      "l": null,
                      "m": null,
                      "n": null,
                      "o": null,
                      "p": null
                    }
                  },
                  "group": {
                    "docs": "**, int**: The group. Range is 1 to 4.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "integer"
                  },
                  "protocol": {
                    "default": "1",
                    "docs": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "schema": {
                      "extends": [
                        "remote_base.RC_SWITCH_PROTOCOL_SCHEMA"
                      ]
                    },
                    "type": "schema"
                  },
                  "state": {
                    "docs": "**, boolean**: The on/off state to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "boolean"
                  }
                }
              },
              "type": "schema"
            },
            "rc_switch_type_d": {
              "docs": "Trigger on a decoded RC Switch Type D remote code with the given data.\n  * **group** (**Required**, int): The group. Range is 1 to 4.\n  \n  * **device** (**Required**, int): The device. Range is 1 to 3.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "device": {
                    "docs": "**, int**: The device. Range is 1 to 3.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "integer"
                  },
                  "group": {
                    "docs": "**, int**: The group. Range is 1 to 4.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "enum",
                    "values": {
                      "a": null,
                      "b": null,
                      "c": null,
                      "d": null
                    }
                  },
                  "protocol": {
                    "default": "1",
                    "docs": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "schema": {
                      "extends": [
                        "remote_base.RC_SWITCH_PROTOCOL_SCHEMA"
                      ]
                    },
                    "type": "schema"
                  },
                  "repeat": {
                    "default": "{'times': 5}",
                    "key": "Optional",
                    "schema": {
                      "config_vars": {
                        "times": {
                          "data_type": "positive_int",
                          "key": "Required",
                          "templatable": true,
                          "type": "integer"
                        },
                        "wait_time": {
                          "default": "0us",
                          "key": "Optional",
                          "schema": {
                            "extends": [
                              "core.positive_time_period_microseconds"
                            ]
                          },
                          "templatable": true,
                          "type": "schema"
                        }
                      }
                    },
                    "type": "schema"
                  },
                  "state": {
                    "docs": "**, boolean**: The on/off state to trigger on.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required",
                    "type": "boolean"
                  }
                }
              },
              "type": "schema"
            },
            "receiver_id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The remote receiver to receive the remote code with. Required if multiple receivers configured.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "remote_base::RemoteReceiverBase"
            },
            "roomba": {
              "docs": "Trigger on a decoded Roomba remote code with the given data.\n  * **data** (**Required**, int): The Roomba code to trigger on, see dumper output for more info.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The Roomba code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "samsung": {
              "docs": "Trigger on a decoded Samsung remote code with the given data.\n  * **data** (**Required**, int): The data to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `32`.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "data_type": "hex_uint64_t",
                    "docs": "**, int**: The data to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "nbits": {
                    "default": "32",
                    "docs": "**, int**: The number of bits of the remote code. Defaults to `32`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "integer"
                  }
                }
              },
              "type": "schema"
            },
            "samsung36": {
              "docs": "Trigger on a decoded Samsung36 remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The command.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "address": {
                    "data_type": "hex_uint16_t",
                    "docs": "**, int**: The address to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "command": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The command.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "sony": {
              "docs": "Trigger on a decoded Sony remote code with the given data.\n  * **data** (**Required**, int): The Sony code to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `12`.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "data": {
                    "data_type": "hex_uint32_t",
                    "docs": "**, int**: The Sony code to trigger on, see dumper output for more info.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "nbits": {
                    "default": "12",
                    "docs": "**, int**: The number of bits of the remote code. Defaults to `12`.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional",
                    "type": "enum",
                    "values": {
                      "12": null,
                      "15": null,
                      "20": null
                    }
                  }
                }
              },
              "type": "schema"
            },
            "toshiba_ac": {
              "docs": "Trigger on a decoded Toshiba AC remote code with the given data.\n  * **rc_code_1** (**Required**, int): The remote control code to trigger on, see dumper output for more details.\n  \n  * **rc_code_2** (*Optional*, int): The second part of the remote control code to trigger on, see dumper output for more details.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "rc_code_1": {
                    "data_type": "hex_uint64_t",
                    "docs": "**, int**: The remote control code to trigger on, see dumper output for more details.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "rc_code_2": {
                    "data_type": "hex_uint64_t",
                    "default": "0",
                    "docs": "**, int**: The second part of the remote control code to trigger on, see dumper output for more details.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  }
                }
              },
              "type": "schema"
            },
            "toto": {
              "docs": "Trigger on a decoded Toto remote code with the given data.\n  * **command** (**Required**, int): The 1-byte Toto command code to trigger on. Range is 0 to 0xFF.\n  \n  * **rc_code_1** (*Optional*, int): The first 4-bit Toto code (usually a command parameter) to trigger on. Range is 0 to 0xF.\n  \n  * **rc_code_2** (*Optional*, int): The second 4-bit Toto code (usually a command parameter) to trigger on. Range is 0 to 0xF.\n  \n  \n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
              "schema": {
                "config_vars": {
                  "command": {
                    "data_type": "hex_uint8_t",
                    "docs": "**, int**: The 1-byte Toto command code to trigger on. Range is 0 to 0xFF.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Required"
                  },
                  "rc_code_1": {
                    "default": "0",
                    "docs": "**, int**: The first 4-bit Toto code (usually a command parameter) to trigger on. Range is 0 to 0xF.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  },
                  "rc_code_2": {
                    "default": "0",
                    "docs": "**, int**: The second 4-bit Toto code (usually a command parameter) to trigger on. Range is 0 to 0xF.\n\n*See also: [remote_receiver Binary Sensor](https://esphome.io/components/remote_receiver.html#id59)*",
                    "key": "Optional"
                  }
                }
              },
              "type": "schema"
            }
          },
          "extends": [
            "binary_sensor.BINARY_SENSOR_SCHEMA",
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  }
}