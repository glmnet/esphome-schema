{
  "pid.climate": {
    "action": {
      "autotune": {
        "docs": "This action starts the autotune process of the PID controller.\n\n*See also: [`climate.pid.autotune` Action](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the PID Climate to start autotuning for.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*",
              "key": "Required",
              "type": "use_id",
              "use_id_type": "pid::PIDClimate"
            },
            "negative_output": {
              "default": "-1.0",
              "docs": "**, float**: The negative output power to drive the cool output at. Defaults to `-1.0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*",
              "key": "Optional"
            },
            "noiseband": {
              "default": "0.25",
              "docs": "**, float**: The noiseband of the process (=sensor) variable. The value of the PID controller must be able to reach this value. Defaults to `0.25`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*",
              "key": "Optional"
            },
            "positive_output": {
              "default": "1.0",
              "docs": "**, float**: The positive output power to drive the heat output at. Defaults to `1.0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-autotune-action)*",
              "key": "Optional"
            }
          }
        },
        "type": "schema"
      },
      "reset_integral_term": {
        "docs": "This action resets the integral term of the PID controller to 0. This might be necessary under certain conditions to avoid the control loop to overshoot (or undershoot) a target.\n\n*See also: [`climate.pid.reset_integral_term` Action](https://esphome.io/components/climate/pid.html#climate-pid-reset-integral-term-action)*",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the PID Climate being reset.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-reset-integral-term-action)*",
              "key": "Required",
              "type": "use_id",
              "use_id_type": "pid::PIDClimate"
            }
          }
        },
        "type": "schema"
      },
      "set_control_parameters": {
        "docs": "This action sets new values for the control parameters of the PID controller. This can be used to manually tune the PID controller. Make sure to take update the values you want on the YAML file! They will reset on the next reboot.\n\n*See also: [`climate.pid.set_control_parameters` Action](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: ID of the PID Climate to start autotuning for.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*",
              "key": "Required",
              "type": "use_id",
              "use_id_type": "pid::PIDClimate"
            },
            "kd": {
              "default": "0.0",
              "docs": "**, float**: The factor for the derivative term of the PID controller. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*",
              "key": "Optional",
              "templatable": true
            },
            "ki": {
              "default": "0.0",
              "docs": "**, float**: The factor for the integral term of the PID controller. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*",
              "key": "Optional",
              "templatable": true
            },
            "kp": {
              "docs": "**, float**: The factor for the proportional term of the PID controller.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#climate-pid-set-control-parameters-action)*",
              "key": "Required",
              "templatable": true
            }
          }
        },
        "type": "schema"
      }
    },
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "control_parameters": {
              "docs": "Control parameters of the PID controller.\n  * **kp** (**Required**, float): The factor for the proportional term of the PID controller.\n  \n  * **ki** (*Optional*, float): The factor for the integral term of the PID controller. Defaults to `0`.\n  \n  * **kd** (*Optional*, float): The factor for the derivative term of the PID controller. Defaults to `0`.\n  \n  * **min_integral** (*Optional*, float): The minimum value of the integral term multiplied by `ki` to prevent windup. Defaults to `-1`.\n  \n  * **max_integral** (*Optional*, float): The maximum value of the integral term multiplied by `ki` to prevent windup. Defaults to `1`.\n  \n  * **starting_integral_term** (*Optional*, float): Set the initial output, by priming the integral term. This is useful for when your system is rebooted and you don\u2019t want to wait for it to get back equilibrium.\n  \n  * **output_averaging_samples** (*Optional*, int): average the output over this many samples. PID controllers can be quite sensitive to small changes on the input sensor. By averaging the last X output samples, the temperature can be more stable. However, the larger the sampling window, the less responsive the PID controller. Defaults to `1` which is no sampling/averaging.\n  \n  * **derivative_averaging_samples** (*Optional*, int): average the derivative term over this many samples. Many controllers don\u2019t use the derivative term because it is sensitive to slight changes in the input sensor. By taking an average of the derivative term it might become more useful for you. Most PID controllers call this derivative filtering. The derivative term is used to pre-act so don\u2019t filter too much. Defaults to `1` which is no sampling/averaging.\n  \n  \n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Required",
              "schema": {
                "config_vars": {
                  "derivative_averaging_samples": {
                    "default": "1",
                    "docs": "**, int**: average the derivative term over this many samples. Many controllers don\u2019t use the derivative term because it is sensitive to slight changes in the input sensor. By taking an average of the derivative term it might become more useful for you. Most PID controllers call this derivative filtering. The derivative term is used to pre-act so don\u2019t filter too much. Defaults to `1` which is no sampling/averaging.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional",
                    "type": "integer"
                  },
                  "kd": {
                    "default": "0.0",
                    "docs": "**, float**: The factor for the derivative term of the PID controller. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "ki": {
                    "default": "0.0",
                    "docs": "**, float**: The factor for the integral term of the PID controller. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "kp": {
                    "docs": "**, float**: The factor for the proportional term of the PID controller.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Required"
                  },
                  "max_integral": {
                    "default": "1",
                    "docs": "**, float**: The maximum value of the integral term multiplied by `ki` to prevent windup. Defaults to `1`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "min_integral": {
                    "default": "-1",
                    "docs": "**, float**: The minimum value of the integral term multiplied by `ki` to prevent windup. Defaults to `-1`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "output_averaging_samples": {
                    "default": "1",
                    "docs": "**, int**: average the output over this many samples. PID controllers can be quite sensitive to small changes on the input sensor. By averaging the last X output samples, the temperature can be more stable. However, the larger the sampling window, the less responsive the PID controller. Defaults to `1` which is no sampling/averaging.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional",
                    "type": "integer"
                  },
                  "starting_integral_term": {
                    "default": "0.0",
                    "docs": "**, float**: Set the initial output, by priming the integral term. This is useful for when your system is rebooted and you don\u2019t want to wait for it to get back equilibrium.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  }
                }
              },
              "type": "schema"
            },
            "cool_output": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of a [float output](https://esphome.io/components/output/index.html#config-output) that decreases the current temperature. At least one of `heat_output` and `cool_output` must be specified.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Optional",
              "type": "use_id",
              "use_id_type": "output::FloatOutput"
            },
            "deadband_parameters": {
              "docs": "Enables a deadband to stabilise and minimise changes in the output when the temperature is close to the target temperature. See [Deadband Setup](https://esphome.io/components/climate/pid.html#deadband-setup).\n  * **threshold_high/threshold_low** (**Required**, float): Specifies a high/low threshold defining the deadband around the target temperature. For instance with `default_target_temperature` of `21\u00b0C` and thresholds of `+/-0.5\u00b0C`, the deadband will be between `20.5\u00b0C - 21.5\u00b0C`. The PID controller will limit output changes within the deadband.\n  \n  * **kp_multiplier** (*Optional*, float): Set the `kp` gain when inside the deadband. Defaults to `0`.\n  \n  * **ki_multiplier** (*Optional*, float): Set the `ki` gain when inside the deadband. Defaults to `0`.\n  \n  * **kd_multiplier** (*Optional*, float): Set the `kd` gain when inside the deadband. Recommended this is set to `0`. Defaults to `0`.\n  \n  * **deadband_output_averaging_samples** (*Optional*, int): Typically when inside the deadband the PID Controller has reached a state of equilibrium, so it advantageous to use a higher number of output samples like 10-30 samples. Defaults to `1` which is no sampling/averaging.\n  \n  \n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "deadband_output_averaging_samples": {
                    "default": "1",
                    "docs": "**, int**: Typically when inside the deadband the PID Controller has reached a state of equilibrium, so it advantageous to use a higher number of output samples like 10-30 samples. Defaults to `1` which is no sampling/averaging.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional",
                    "type": "integer"
                  },
                  "kd_multiplier": {
                    "default": "0.0",
                    "docs": "**, float**: Set the `kd` gain when inside the deadband. Recommended this is set to `0`. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "ki_multiplier": {
                    "default": "0.0",
                    "docs": "**, float**: Set the `ki` gain when inside the deadband. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "kp_multiplier": {
                    "default": "0.1",
                    "docs": "**, float**: Set the `kp` gain when inside the deadband. Defaults to `0`.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Optional"
                  },
                  "threshold_high": {
                    "docs": "**, float**: Specifies a high/low threshold defining the deadband around the target temperature. For instance with `default_target_temperature` of `21\u00b0C` and thresholds of `+/-0.5\u00b0C`, the deadband will be between `20.5\u00b0C - 21.5\u00b0C`. The PID controller will limit output changes within the deadband.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Required"
                  },
                  "threshold_low": {
                    "docs": "**, float**: Specifies a high/low threshold defining the deadband around the target temperature. For instance with `default_target_temperature` of `21\u00b0C` and thresholds of `+/-0.5\u00b0C`, the deadband will be between `20.5\u00b0C - 21.5\u00b0C`. The PID controller will limit output changes within the deadband.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
                    "key": "Required"
                  }
                }
              },
              "type": "schema"
            },
            "default_target_temperature": {
              "docs": "**, float**: The default target temperature (setpoint) for the control algorithm. This can be dynamically set in the frontend later.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Required"
            },
            "heat_output": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of a [float output](https://esphome.io/components/output/index.html#config-output) that increases the current temperature. At least one of `heat_output` and `cool_output` must be specified.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Optional",
              "type": "use_id",
              "use_id_type": "output::FloatOutput"
            },
            "humidity_sensor": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: If specified, this sensor is used to measure the current humidity. This is used for information only and does not influence temperature control.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Optional",
              "type": "use_id",
              "use_id_type": "sensor::Sensor"
            },
            "id": {
              "id_type": {
                "class": "pid::PIDClimate",
                "parents": [
                  "Component",
                  "EntityBase",
                  "climate::Climate"
                ]
              }
            },
            "sensor": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that is used to measure the current temperature.\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#configuration-variables)*",
              "key": "Required",
              "type": "use_id",
              "use_id_type": "sensor::Sensor"
            }
          },
          "extends": [
            "climate.CLIMATE_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  },
  "pid.sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "accuracy_decimals": {
              "default": "1"
            },
            "climate_id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the pid climate to get the values from.\n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*",
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "pid::PIDClimate"
            },
            "icon": {
              "default": "mdi:gauge"
            },
            "id": {
              "id_type": {
                "class": "pid::PIDClimateSensor",
                "parents": [
                  "Component",
                  "EntityBase",
                  "sensor::Sensor"
                ]
              }
            },
            "state_class": {
              "default": "measurement"
            },
            "type": {
              "docs": "**, string**: The value to monitor. One of\n  * `RESULT` - The resulting value (sum of P, I, and D terms).\n  \n  * `ERROR` - The calculated error (setpoint - process_variable)\n  \n  * `PROPORTIONAL` - The proportional term of the PID controller.\n  \n  * `INTEGRAL` - The integral term of the PID controller.\n  \n  * `DERIVATIVE` - The derivative term of the PID controller.\n  \n  * `HEAT` - The resulting heating power to the supplied to the `heat_output`.\n  \n  * `COOL` - The resulting cooling power to the supplied to the `cool_output`.\n  \n  * `KP` - The current factor for the proportional term of the PID controller.\n  \n  * `KI` - The current factor for the integral term of the PID controller.\n  \n  * `KD` - The current factor for the differential term of the PID controller.\n  \n  \n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*",
              "key": "Required",
              "type": "enum",
              "values": {
                "COOL": {
                  "docs": "The resulting cooling power to the supplied to the `cool_output`."
                },
                "DERIVATIVE": {
                  "docs": "The derivative term of the PID controller."
                },
                "ERROR": {
                  "docs": "The calculated error (setpoint - process_variable)"
                },
                "HEAT": {
                  "docs": "The resulting heating power to the supplied to the `heat_output`."
                },
                "INTEGRAL": {
                  "docs": "The integral term of the PID controller."
                },
                "KD": {
                  "docs": "The current factor for the differential term of the PID controller."
                },
                "KI": {
                  "docs": "The current factor for the integral term of the PID controller."
                },
                "KP": {
                  "docs": "The current factor for the proportional term of the PID controller."
                },
                "PROPORTIONAL": {
                  "docs": "The proportional term of the PID controller."
                },
                "RESULT": {
                  "docs": "The resulting value (sum of P, I, and D terms)."
                }
              }
            },
            "unit_of_measurement": {
              "default": "%"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA",
            "sensor.SENSOR_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  }
}