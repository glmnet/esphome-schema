{
  "fingerprint_grow": {
    "action": {
      "aura_led_control": {
        "docs": "Controls the Aura LED on the reader. Only available on select models.  NOTE: The R503 has 2 variants with different LED colour options.\n\n*See also: [`fingerprint_grow.aura_led_control` Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*",
        "schema": {
          "config_vars": {
            "color": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: The LED color to activate. For R503, one of `RED`, `BLUE` and `PURPLE`.  For R503-RGB, one of `RED`, `BLUE`, `PURPLE`, `GREEN`, `YELLOW`, `CYAN` and `WHITE`.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*",
              "key": "Required",
              "templatable": true,
              "type": "enum",
              "values": {
                "BLUE": null,
                "CYAN": null,
                "GREEN": null,
                "PURPLE": null,
                "RED": null,
                "WHITE": null,
                "YELLOW": null
              }
            },
            "count": {
              "data_type": "uint8_t",
              "docs": "**, int, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: How many times to repeat the pattern. Only relevant for `BREATHING` and `FLASHING` states. 0 for infinite, or 1 to 255.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*",
              "key": "Required",
              "templatable": true,
              "type": "integer"
            },
            "id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            },
            "speed": {
              "data_type": "uint8_t",
              "docs": "**, int, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: The duration each cycle lasts, a factor of 10ms. Only relevant for `BREATHING`, `FLASHING`, `GRADUAL_ON` and `GRADUAL_OFF` states. The total duration is defined by 10ms * speed * count. Range is 0 to 255.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*",
              "key": "Required",
              "templatable": true,
              "type": "integer"
            },
            "state": {
              "docs": "**, string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: The state to set the LED. One of `BREATHING`, `FLASHING`, `ALWAYS_ON`, `ALWAYS_OFF`, `GRADUAL_ON` and `GRADUAL_OFF`.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*",
              "key": "Required",
              "templatable": true,
              "type": "enum",
              "values": {
                "ALWAYS_OFF": null,
                "ALWAYS_ON": null,
                "BREATHING": null,
                "FLASHING": null,
                "GRADUAL_OFF": null,
                "GRADUAL_ON": null
              }
            }
          }
        },
        "type": "schema"
      },
      "cancel_enroll": {
        "docs": "Cancels the current fingerprint enrollment process. Triggers the `on_enrollment_failed` trigger.\n\n*See also: [`fingerprint_grow.cancel_enroll` Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-cancel-enroll-action)*",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            }
          }
        },
        "type": "schema"
      },
      "delete": {
        "docs": "Removes the enrolled fingerprint from the slot number defined.\n\n*See also: [`fingerprint_grow.delete` Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-action)*",
        "maybe": "finger_id",
        "schema": {
          "config_vars": {
            "finger_id": {
              "data_type": "uint16_t",
              "docs": "**, int, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: The slot number of the enrolled fingerprint to delete.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-action)*",
              "key": "Required",
              "templatable": true,
              "type": "integer"
            },
            "id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            }
          }
        },
        "type": "schema"
      },
      "delete_all": {
        "docs": "Removes all enrolled fingerprints.\n\n*See also: [`fingerprint_grow.delete_all` Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-all-action)*",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            }
          }
        },
        "type": "schema"
      },
      "enroll": {
        "docs": "Starts the fingerprint enrollment process on the slot number defined.\n\n*See also: [`fingerprint_grow.enroll` Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-enroll-action)*",
        "maybe": "finger_id",
        "schema": {
          "config_vars": {
            "finger_id": {
              "data_type": "uint16_t",
              "docs": "**, int, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: The slot number to enroll the new fingerprint into. Limited to the fingerprint capacity available on the reader.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-enroll-action)*",
              "key": "Required",
              "templatable": true,
              "type": "integer"
            },
            "id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            },
            "num_scans": {
              "data_type": "uint8_t",
              "docs": "**, int, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Number of times to scan the finger to be enrolled. Limited to the number of character buffers available on the reader. Defaults to 2.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-enroll-action)*",
              "key": "Optional",
              "templatable": true,
              "type": "integer"
            }
          }
        },
        "type": "schema"
      },
      "led_control": {
        "docs": "Turns on or off the LED on the reader. Only available on select models. If you have the R503 or R503-RGB use [fingerprint_grow.aura_led_control Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control) instead.\n\n*See also: [`fingerprint_grow.led_control` Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-led-control-action)*",
        "maybe": "state",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            },
            "state": {
              "docs": "**, boolean, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: The state to set the LED.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-led-control-action)*",
              "key": "Required",
              "templatable": true,
              "type": "boolean"
            }
          }
        },
        "type": "schema"
      }
    },
    "schemas": {
      "CONFIG_SCHEMA": {
        "is_list": true,
        "schema": {
          "config_vars": {
            "id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "id_type": {
                "class": "fingerprint_grow::FingerprintGrowComponent",
                "parents": [
                  "Component",
                  "PollingComponent",
                  "uart::UARTDevice"
                ]
              },
              "key": "GeneratedID"
            },
            "idle_period_to_sleep": {
              "docs": "**, [Time](https://esphome.io/guides/configuration-types.html#config-time)**: The sensor idle period to wait before powering it off (sleep). Defaults to `5s`. See [Sleep Mode](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-sleep-mode) for more information.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "type": "schema"
            },
            "new_password": {
              "data_type": "uint32_t",
              "docs": "**, int**: Sets a new password to use for authentication. See [Setting a New Password](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-set-new-password) for more information.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "integer"
            },
            "on_enrollment_done": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when a fingerprint is enrolled. See [on_enrollment_done Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-done).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_enrollment_failed": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when a fingerprint enrollment failed. See [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-failed).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_enrollment_scan": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when a fingerprint is scanned during enrollment. See [on_enrollment_scan Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-scan).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_finger_scan_invalid": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when the scan of a fingerprint failed. See [on_finger_scan_invalid Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-invalid).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_finger_scan_matched": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when an enrolled fingerprint is scanned. See [on_finger_scan_matched Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-matched).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_finger_scan_misplaced": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when the finger is not entirely touching the sensor. See [on_finger_scan_misplaced Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-misplaced).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_finger_scan_start": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when the finger touches the sensor. See [on_finger_scan_start Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-start).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "on_finger_scan_unmatched": {
              "docs": "**, [Automation](https://esphome.io/automations/index.html#automation)**: An action to be performed when an unknown fingerprint is scanned. See [on_finger_scan_unmatched Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-unmatched).\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "trigger"
            },
            "password": {
              "data_type": "uint32_t",
              "docs": "**, int**: Password to use for authentication. Defaults to `0x00`.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "type": "integer"
            },
            "sensing_pin": {
              "docs": "**, [Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to the reader\u2019s finger detection signal (WAKEUP) output.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "modes": [
                "input"
              ],
              "schema": true,
              "type": "pin"
            },
            "sensor_power_pin": {
              "docs": "**, [Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Output pin responsible for toogling the sensor power on and off.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "Optional",
              "modes": [
                "output"
              ],
              "schema": true,
              "type": "pin"
            },
            "uart_id": {
              "docs": "**, [ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*",
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "uart::UARTComponent"
            },
            "update_interval": {
              "default": "500ms",
              "key": "Optional"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  },
  "fingerprint_grow.binary_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "fingerprint_grow_id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            },
            "icon": {
              "default": "mdi:key-plus"
            }
          },
          "extends": [
            "binary_sensor.BINARY_SENSOR_SCHEMA"
          ]
        },
        "type": "schema"
      }
    }
  },
  "fingerprint_grow.sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "schema": {
          "config_vars": {
            "capacity": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "entity_category": {
                    "default": "diagnostic"
                  },
                  "icon": {
                    "default": "mdi:database"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "fingerprint_count": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "entity_category": {
                    "default": "diagnostic"
                  },
                  "icon": {
                    "default": "mdi:fingerprint"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "fingerprint_grow_id": {
              "key": "GeneratedID",
              "type": "use_id",
              "use_id_type": "fingerprint_grow::FingerprintGrowComponent"
            },
            "last_confidence": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "entity_category": {
                    "default": "diagnostic"
                  },
                  "icon": {
                    "default": "mdi:account-check"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "last_finger_id": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "entity_category": {
                    "default": "diagnostic"
                  },
                  "icon": {
                    "default": "mdi:account"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "security_level": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "entity_category": {
                    "default": "diagnostic"
                  },
                  "icon": {
                    "default": "mdi:security"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            },
            "status": {
              "key": "Optional",
              "schema": {
                "config_vars": {
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "entity_category": {
                    "default": "diagnostic"
                  }
                },
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ]
              },
              "type": "schema"
            }
          }
        },
        "type": "schema"
      }
    }
  }
}